package org.msgpack.hadoop.mapreduce.input;

import java.io.IOException;
import java.io.InputStream;

import org.apache.commons.codec.binary.Base64;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FSDataInputStream;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.compress.CompressionCodec;
import org.apache.hadoop.io.compress.CompressionCodecFactory;
import org.apache.hadoop.mapreduce.InputSplit;
import org.apache.hadoop.mapreduce.RecordReader;
import org.apache.hadoop.mapreduce.TaskAttemptContext;
import org.apache.hadoop.mapreduce.lib.input.FileSplit;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.util.LineReader;


import org.msgpack.hadoop.mapreduce.io.MessagePackWritable;

public class MessagePackBase64LineRecordReader<K extends LongWritable, V extends MessagePackWritable<V>> extends RecordReader<K, V> {
    private LineReader lineReader_;
    private final Text line_ = new Text();
    private final LongWritable key_ = new LongWritable();
    private final V value_;
    private final Base64 base64_ = new Base64();

    @Override
    public synchronized void close() throws IOException {
        if (lineReader_ != null) {
            lineReader_.close();
        }
    }
}
