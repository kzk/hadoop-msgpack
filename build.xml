<project name="hadoop-msgpack" default="release-jar" basedir=".">
    
  <!-- Global properties for this build -->
  <property name="jar.name" value="hadoop-msgpack" />
  <property name="version" value="1.0" />

  <!-- Directories -->
  <property name="build.dir" location="build" />
  <property name="javadoc.dir" location="javadoc" />
  <property name="dist.dir"  location="dist" />
  
  <property name="src.dir" location="src" />
  <property name="src.java.dir" location="${src.dir}/java" />
  <property name="test.src.dir" location="${src.dir}/test" />  

  <property name="src.gen.java.dir" location="${build.dir}/gen-java" /> 
  <property name="classes.dir" location="${build.dir}/classes" />

  <property name="lib.dir" value="${basedir}/lib"/>


  <property name="test.lib.dir" value="${lib.dir}"/>
  <property name="test.build.dir" value="${build.dir}/test"/>  
  <property name="test.generated.dir" value="${test.build.dir}/src"/>
  <property name="test.build.data" value="${test.build.dir}/data"/>
  <property name="test.log.dir" value="${test.build.dir}/logs"/>
  <property name="test.build.classes" value="${test.build.dir}/classes"/>

  <property name="test.include" value="Test*"/>
  <property name="test.classpath.id" value="test.classpath"/>
  <property name="test.output" value="no"/>
  <property name="test.timeout" value="900000"/>

  <property name="test.junit.output.format" value="plain"/>
  <property name="test.junit.printsummary" value="yes" />
  <property name="test.junit.fork.mode" value="perTest" />
  <property name="test.junit.haltonfailure" value="no" />
  <property name="test.junit.maxmemory" value="512m" />

	
  <path id="test.classpath">
      <pathelement location="${classes.dir}"/>
      <pathelement location="${test.build.classes}"/>
      <pathelement location="${basedir}/bin}"/>
      <fileset dir="${test.lib.dir}">
          <include name="**/*.jar"/>
      </fileset>
  </path>
  
  <target name="debug" description="sets properties for debugging (logging on, debug symbols, etc)">
	<echo message="Building in debug mode..."/>
	<property name="compile.mode" value="debug"/>
	<property name="java.debug" value="true"/>
  </target>

  <target name="release" description="sets properties for release builds.">
	<echo message="Building in release mode..."/>
	<property name="compile.mode" value="release"/>
	<property name="java.debug" value="false"/>
  </target>

  <target name="init">
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build.dir}" />
    <mkdir dir="${classes.dir}" />
    <mkdir dir="${test.build.dir}" />
  </target>

  <macrodef name="compile-javacode">
   <sequential>
    <!-- Compile the java code from ${src.java} into ${build} -->
    <javac srcdir="${src.java.dir}" destdir="${classes.dir}" debug="${java.debug}" debuglevel="lines,vars,source">
      <classpath>
        <fileset dir="lib">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
    </javac>
   </sequential>
  </macrodef>

  <target name="compile" depends="init" description="compile the source">
    <compile-javacode />
  </target>
    
  <target name="jar" depends="compile" description="generate the distribution">
    <!-- Create the distribution directory -->
    <mkdir dir="${dist.dir}"/>
	<!-- Delete the old jar file -->
	<delete file="${dist.dir}/${jar.name}-${version}.jar"/>
    <jar jarfile="${dist.dir}/${jar.name}-${version}.jar">
      <fileset dir="${classes.dir}"/>
    </jar>
  </target>
  
  <target name="javadoc" depends="compile" description="generate documentation" >
    <delete dir="${javadoc.dir}" />
    <javadoc destdir="${javadoc.dir}">
      <fileset dir="${src.java.dir}" />
      <fileset dir="${src.gen.java.dir}" />
      <classpath>
        <fileset dir="${lib.dir}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
    </javadoc>
  </target>

  <target name="debug-jar" description="Build debug and jar" depends="debug,jar"/>
  <target name="release-jar" description="Build release and jar" depends="release,jar"/>

  <target name="clean" description="clean up">
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build.dir}"/>
    <delete dir="${classes.dir}" />
    <delete dir="${dist.dir}"/>
  </target>

  <target name="examples" depends="jar" description="Compile the examples">
    <ant dir="examples" />
  </target>

  <target name="compile-java-tests" depends="compile" >
    <echo message="classes dir: ${classes.dir}" /> 
	<delete dir="${test.build.classes}"/>
    <mkdir dir="${test.build.classes}"/>
    <javac srcdir="${test.src.dir}" destdir="${test.build.classes}" deprecation="on" debug="${java.debug}" debuglevel="lines,vars,source">
      <classpath refid="${test.classpath.id}"/>
      <include name="**/*.java" />
    </javac>
  </target>
  
  <target name="test" depends="compile-java-tests" 
                      description="Run unit tests">

    <delete dir="${test.log.dir}"/>
    <mkdir dir="${test.log.dir}"/>
    <junit showoutput="${test.output}"
      printsummary="${test.junit.printsummary}"
      haltonfailure="${test.junit.haltonfailure}"
      fork="yes"
      forkmode="${test.junit.fork.mode}"
      maxmemory="${test.junit.maxmemory}"
      dir="${basedir}" timeout="${test.timeout}"
      errorProperty="tests.failed" failureProperty="tests.failed">
      <sysproperty key="test.build.data" value="${test.build.data}"/>
      <sysproperty key="test.cache.data" value="${test.cache.data}"/>
      <sysproperty key="test.debug.data" value="${test.debug.data}"/>
      <sysproperty key="test.log.dir" value="${test.log.dir}"/>
      <sysproperty key="test.source.dir" value="${test.src.dir}"/>
      <sysproperty key="test.build.extraconf" value="${test.build.extraconf}" />
      <sysproperty key="java.library.path"
       value="${lib.dir}/*.jar:${classes.dir}:${test.build.classes}:${basedir}/bin"/>
      <classpath refid="${test.classpath.id}"/>
      <formatter type="${test.junit.output.format}" />
      <batchtest todir="${test.log.dir}" unless="testcase">
        <fileset dir="${test.src.dir}"
         includes="**/${test.include}.java"
         excludes="**/${test.exclude}.java" />
      </batchtest>
      <batchtest todir="${test.log.dir}" if="testcase">
        <fileset dir="${test.src.dir}" includes="**/${testcase}.java"/>
      </batchtest>
    </junit>
    <fail if="tests.failed">Tests failed!</fail>
  </target>
</project>
